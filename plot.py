#!/bin/env python

# Generate plots to show completion rates of Aliens task sessions
from re import X
import matplotlib.pyplot as plt
import matplotlib.markers as mrks
import pandas as pd
import matplotlib.ticker as ticker
# read summary.tsv generated by audit.sh
with open('complete_data_2.tsv', 'r') as f:
    complete_data = pd.read_csv(f, sep='\t')
with open('missing_data_2.tsv', 'r') as f:
    missing = pd.read_csv(f, sep='\t')
with open('summary_2.csv', 'r') as f:
    summary = pd.read_csv(f)

df = pd.DataFrame(complete_data, columns=['subject', 'session', 'responses'])
summary_df = pd.DataFrame(summary)
# df = pd.DataFrame(missing, columns=['subject', 'session', 'responses'])
# redcap_df = pd.read_csv('/home/jackgray/Downloads/MOREProject-RptEMAcompletion_DATA_2022-10-09_2110.csv')
# enrollment_df = pd.read_csv('/home/jackgray/Downloads/MOREProject-RptEnrollment_DATA_2022-10-09_2137.csv')

newdf = pd.DataFrame()

# print(summary_df)

# print(redcap_df.redcap_event_name)

# for s in redcap_df:
#     # redcap_df['narc_id'] 
#     # print(s)
#     # print(enrollment_df.at[s, 'narc_id'])
#     # print(redcap_df[s])
#     try:
#         # if redcap_df
#         # if isinstance(redcap_df.at[s, 'session'], int):
#         redcap_df['session'] = 'session'
#         redcap_df['session'] = redcap_df.at[s, 'redcap_event_name'].split('_')[-3]
#         redcap_df.at[s, 'narc_id'] = enrollment_df.at[s, 'narc_id'].lower().replace('s','')
#     except:
#         pass
# print(redcap_df.to_string())

# Clean labels

count = 0
for t in summary_df['total_sessions']:
#     print(t)
    summary_df.at[count, 'total_sessions'] = int(t)
    
    count += 1
    
    
count = 0
for s in summary_df['subject']:
    s = s.replace('./sub-s', '')
    summary_df.at[count, 'subject'] = s
    count+=1

count = 0
for i in df['session']:
    # print(i)
    if 'a' in i:
        continue
    df.at[count, 'session'] = int(i.replace('ses-', ''))
    count+=1
    
count = 0
for j in df['subject']:
    j2 = j.replace('./sub-s', '')
    df.at[count, 'subject'] = j2 #.replace('./','')
    count+=1

count = 0
print(summary_df['total_sessions'])
for ts in df['subject']:
    try:
        df.loc[df['subject'] == ts, 'total_sessions'] = int(summary_df.loc[summary_df['subject'] == ts, 'total_sessions'])
    except Exception as e:
        print(e)
        break
    count+=1


count=0
for k in df['responses']:
    try:
        if int(df.at[count, 'responses']) > 71:
            df.at[count, 'responses'] = 71
        count+=1
    except:
        break

df = df.sort_values(by=['total_sessions'])
 
print(df.to_string())
    

plt.scatter(df.sort_values(by=['total_sessions']).session, df.sort_values(by='total_sessions').subject, c=df.responses, cmap='RdYlGn') # Use shades of red to yellow to green as a function of responses value for colormap

total_sessions = df.sort_values(by='total_sessions').total_sessions.astype('int64').astype('str')
ax = plt.gca()

ax2 = ax.twiny().twinx()
# ax2.hlines(y=df.total_sessions, xmin=1, xmax=56)
ax2.step(df.sort_values(by='total_sessions').total_sessions.astype('int64').astype('str').astype('int64'), df.sort_values(by='total_sessions').subject, color='magenta')
# ax2.yaxis.set_major_locator(ticker.MultipleLocator(1))
ax2.xaxis.set_major_locator(ticker.MultipleLocator(1))
ax2.tick_params(axis='x', color='magenta')
ax2.spines['top'].set_edgecolor('magenta')
ax2.set_ylabel('Amount of Task Completed')
ax2.set_xlabel('Total Sessions Completed')

ax.xaxis.set_major_locator(ticker.MultipleLocator(1))
# ax.tick_params(labeltop=False) #, labelright=True)
ax.set_xlabel('EMA Day')
ax.set_ylabel('Subject')
plt.title('EMA/Aliens Task Completion \n\n Total Sessions Completed')

# ax.plot(df.session, df.subject)
plt.xlim([-3.5, 96.5])
plt.colorbar() #df.responses, ax=ax)
ax.grid()
plt.show()